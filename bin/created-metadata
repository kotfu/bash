#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2020 Jared Crapo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
"""
Extract creation date and time from a movie or image file

Requires:
    - exiv2 in the path
    - ffmpeg in the path
    - python-dateutil module
    - python >= 3.5

Exit codes:
    0 = command completed successfully
    1 = file not found
    2 = no metadata found in file
"""
import argparse
import dateutil.parser
import logging
import os
import re
import subprocess
import sys

VERSION_STRING = "0.2"


def _build_parser():
    """Build the argument parser"""
    parser = argparse.ArgumentParser(description="my command line program")

    filename_help = "path to a movie file"
    parser.add_argument("filename", nargs=1, help=filename_help)

    debug_help = "show additional debugging information while processing"
    parser.add_argument("-d", "--debug", action="store_true", help=debug_help)

    version_help = "show the version information and exit"
    parser.add_argument(
        "-v",
        "--version",
        action="version",
        version="{} {}".format(parser.prog, VERSION_STRING),
        help=version_help,
    )

    return parser


def colons_to_dashes(value):
    match = re.search(r"(\d\d\d\d):(\d\d):(\d\d) (.*)", value)
    if match:
        return "{}-{}-{} {}".format(
            match.group(1), match.group(2), match.group(3), match.group(4)
        )
    else:
        return value


# SIFTERS is an array of tuples
# the first element in the tuple has the command to execute
# the second element in the tuple has a regular expression which should return a date string looking thing
# the third element in the tuple has a function to call to transform the output before sending it
#    to dateutil to parse it
SIFTERS = [
    (
        'exiv2 "{}"',
        re.compile(r"^.*timestamp *\: *(.*)", re.MULTILINE),
        colons_to_dashes,
    ),
    (
        'ffmpeg -hide_banner -i "{}" -fs 0 -f null /dev/null',
        re.compile(r"^ *creation_time *\: *(.*)", re.MULTILINE),
        None,
    ),
]


def get_metadata_date(filename):
    """Extract created date from an image or video file metadata

    :return:    a python date object, or None if no created metadata found
    """

    for cmdline, regexp, func in SIFTERS:
        logging.debug("running sifter....")
        cmdline = cmdline.format(filename)
        logging.debug("executing '%s'", cmdline)
        process = subprocess.run(
            cmdline, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True
        )
        if process.returncode == 0:
            output = process.stdout.decode("utf-8")
            logging.debug("searching output for %s", str(regexp))
            match = re.search(regexp, output)
            if match:
                datestr = match.group(1)
                logging.debug("found creation date=%s", datestr)
                if func:
                    logging.debug("calling %s to pre-process", str(func))
                    datestr = func(datestr)
                    logging.debug("date preprocessed to %s", datestr)
                created = dateutil.parser.parse(datestr)
                logging.debug("date parsed to: %s", created.strftime("%A, %B %-d, %Y"))
                return created
            else:
                logging.debug("no match found in output")
        else:
            logging.debug("error processing file, continuing")

    # we didn't match anything
    logging.debug("sifters finished processing with no metadata found")
    return None


#
# entry point for command line
def main(argv=None):
    """Entry point for command line program."""
    parser = _build_parser()
    args = parser.parse_args(argv)

    if args.debug:
        logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.DEBUG)
    else:
        logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.ERROR)
    logging.debug("argv=%s", argv)
    logging.debug("args=%s", str(args))

    exitcode = 0
    filename = args.filename[0]
    if os.path.isfile(filename):
        created = get_metadata_date(filename)
        if created:
            pass
        else:
            print(
                "{}: {}: no creation date metadata found".format(parser.prog, filename)
            )
            exitcode = 2
    else:
        print("{}: {}: no such file".format(parser.prog, filename))
        exitcode = 1

    return exitcode


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
